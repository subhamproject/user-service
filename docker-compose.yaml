version: '3.6'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-broker
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  mongodb_container:
    image: mongo:latest
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: 1G
    hostname: mongo
    container_name: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
  
  #jaeger container
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    ports:
      - "127.0.0.1:9200:9200"
      - "127.0.0.1:9300:9300"
    restart: on-failure
    environment:
      - cluster.name=jaeger-cluster
      - discovery.type=single-node
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - esdata:/usr/share/elasticsearch/data

  jaeger-collector:
    image: jaegertracing/jaeger-collector
    ports:
      - "14269:14269"
      - "14268:14268"
      - "14267:14267"
      - "14250:14250"
      - "9411:9411"
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--es.num-shards=1",
      "--es.num-replicas=0",
      "--log-level=error"
    ]
    depends_on:
      - elasticsearch

  jaeger-agent:
    image: jaegertracing/jaeger-agent
    hostname: jaeger-agent
    command: ["--reporter.grpc.host-port=jaeger-collector:14250"]
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
    depends_on:
      - jaeger-collector

  jaeger-query:
    image: jaegertracing/jaeger-query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - no_proxy=localhost
    ports:
      - "16686:16686"
      - "16687:16687"
    restart: on-failure
    command: [
      "--es.server-urls=http://elasticsearch:9200",
      "--span-storage.type=elasticsearch",
      "--log-level=debug"
    ]
    depends_on:
      - jaeger-agent

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.76.1
    container_name: otelcol
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: [ "--config=/etc/otelcol-config.yml"]
    environment:
      OTEL_EXPORTER_OTLP_ENDPOINT: https://otlp.nr-data.net:4318
      NEW_RELIC_LICENSE_KEY: 6fcd8872c8bfc9d3a5470c143d2c9e71d619NRAL
    volumes:
    - ./config/otel-config.yaml:/etc/otelcol-config.yml
    ports:
      - "4317:4317"     # OTLP over gRPC receiver
      - "4318:4318"     # OTLP over HTTP receiver
      - "9464"          # Prometheus exporter
      - "8888"          # metrics endpoint

  user:
    build:
      context: ./build/user
      args:
       GIT_BRANCH: feat-kafka
    image: user-service:latest
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: 500M
    hostname: user
    #container_name: user
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    depends_on:
      order:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
    environment:
      SERVICE_PORT: 8082
      ORDER_SVC_HOST: order
      ORDER_SVC_PORT: 8081
      MONGO_HOST: mongo
      PORT_PORT: 27017
      MONGO_USERNAME: root
      MONGO_PASSWORD: rootpassword
      KAFKA_HOST: kafka1
      KAFKA_PORT: 9092
      KAFKA_TOPIC: demoTopic

  userlb:
      image: nginx:latest
      container_name: userlb
      hostname: userapilb
      volumes:
      - ./config/user_nginx.conf:/etc/nginx/nginx.conf:ro
      ports:
      - "8082:80"
      depends_on:
        user:
          condition: service_healthy


  order:
    build:
      context: ./build/order
      args:
       GIT_BRANCH: feat-kafka
    image: order-service:latest
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: 500M
    hostname: order
    #container_name: order
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s
    environment:
      SERVICE_PORT: 8081
      MONGO_HOST: mongo
      PORT_PORT: 27017
      MONGO_USERNAME: root
      MONGO_PASSWORD: rootpassword
    depends_on:
      kafka-broker:
        condition: service_healthy

  orderlb:
      image: nginx:latest
      container_name: orderlb
      hostname: orderlb
      volumes:
      - ./config/order_nginx.conf:/etc/nginx/nginx.conf:ro
      ports:
      - "8081:80"
      depends_on:
        order:
          condition: service_healthy


  system:
    build:
      context: ./build/system
      args:
       GIT_BRANCH: feat-kafka
    image: system-service:latest
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: 500M
    hostname: system
    #container_name: system
    environment:
      SERVICE_PORT: 8083
      KAFKA_HOST: kafka1
      KAFKA_PORT: 9092
      KAFKA_TOPIC: demoTopic
      KAFKA_MAX_POLL_INTERVAL_MS: 86400000
    depends_on:
      user:
        condition: service_healthy
      order:
        condition: service_healthy

  systemlb:
      image: nginx:latest
      container_name: systemlb
      hostname: systemlb
      volumes:
      - ./config/system_nginx.conf:/etc/nginx/nginx.conf:ro
      ports:
      - "8083:80"
      depends_on:
       - system

  scale:
    build:
      context: ./build/scale
    image: scale:latest
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: 500M
    hostname: scale
    container_name: scale
    depends_on:
      user:
        condition: service_healthy
      order:
        condition: service_healthy

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    deploy:
        resources:
            limits:
              cpus: '1'
              memory: 500M
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk:/dev/disk/:ro
    ports:
    - '8080:8080'

volumes:
  mongodb_data_container:
  esdata:
    driver: local
